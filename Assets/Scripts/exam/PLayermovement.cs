//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/exam/PLayermovement.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PLayermovement: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PLayermovement()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PLayermovement"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""3528ba80-c2b7-477c-9f4d-904796e55b0d"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""5c624054-1078-4787-b089-0d236044ba20"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ArmMove"",
                    ""type"": ""Value"",
                    ""id"": ""58c7d766-b0ee-4e6a-ae8d-1f7e7c5c3b40"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Join"",
                    ""type"": ""Button"",
                    ""id"": ""4c8658bd-7747-4ba5-a010-b55611fd1860"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchArmsDivan"",
                    ""type"": ""Button"",
                    ""id"": ""681b56d0-3dbd-4ffa-911b-57eda7dbcdce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ResetDivan"",
                    ""type"": ""Button"",
                    ""id"": ""aad07d28-fb37-4617-b22a-b8fcf202e72b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a21df4a4-a3b4-4cbf-901f-be6838b3b62f"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""122e055b-9e99-4e6f-b37e-7078fdc9c89b"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""gamepad"",
                    ""action"": ""ArmMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce716d9a-4a0b-4746-b609-bef9e0d002b9"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""gamepad"",
                    ""action"": ""Join"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""419944e6-5cf6-4072-879d-b082510c422f"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchArmsDivan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e34d51e-4a64-4365-b542-da83d186ab11"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""gamepad"",
                    ""action"": ""ResetDivan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""gamepad"",
            ""bindingGroup"": ""gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_ArmMove = m_Player.FindAction("ArmMove", throwIfNotFound: true);
        m_Player_Join = m_Player.FindAction("Join", throwIfNotFound: true);
        m_Player_SwitchArmsDivan = m_Player.FindAction("SwitchArmsDivan", throwIfNotFound: true);
        m_Player_ResetDivan = m_Player.FindAction("ResetDivan", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_ArmMove;
    private readonly InputAction m_Player_Join;
    private readonly InputAction m_Player_SwitchArmsDivan;
    private readonly InputAction m_Player_ResetDivan;
    public struct PlayerActions
    {
        private @PLayermovement m_Wrapper;
        public PlayerActions(@PLayermovement wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @ArmMove => m_Wrapper.m_Player_ArmMove;
        public InputAction @Join => m_Wrapper.m_Player_Join;
        public InputAction @SwitchArmsDivan => m_Wrapper.m_Player_SwitchArmsDivan;
        public InputAction @ResetDivan => m_Wrapper.m_Player_ResetDivan;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @ArmMove.started += instance.OnArmMove;
            @ArmMove.performed += instance.OnArmMove;
            @ArmMove.canceled += instance.OnArmMove;
            @Join.started += instance.OnJoin;
            @Join.performed += instance.OnJoin;
            @Join.canceled += instance.OnJoin;
            @SwitchArmsDivan.started += instance.OnSwitchArmsDivan;
            @SwitchArmsDivan.performed += instance.OnSwitchArmsDivan;
            @SwitchArmsDivan.canceled += instance.OnSwitchArmsDivan;
            @ResetDivan.started += instance.OnResetDivan;
            @ResetDivan.performed += instance.OnResetDivan;
            @ResetDivan.canceled += instance.OnResetDivan;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @ArmMove.started -= instance.OnArmMove;
            @ArmMove.performed -= instance.OnArmMove;
            @ArmMove.canceled -= instance.OnArmMove;
            @Join.started -= instance.OnJoin;
            @Join.performed -= instance.OnJoin;
            @Join.canceled -= instance.OnJoin;
            @SwitchArmsDivan.started -= instance.OnSwitchArmsDivan;
            @SwitchArmsDivan.performed -= instance.OnSwitchArmsDivan;
            @SwitchArmsDivan.canceled -= instance.OnSwitchArmsDivan;
            @ResetDivan.started -= instance.OnResetDivan;
            @ResetDivan.performed -= instance.OnResetDivan;
            @ResetDivan.canceled -= instance.OnResetDivan;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_gamepadSchemeIndex = -1;
    public InputControlScheme gamepadScheme
    {
        get
        {
            if (m_gamepadSchemeIndex == -1) m_gamepadSchemeIndex = asset.FindControlSchemeIndex("gamepad");
            return asset.controlSchemes[m_gamepadSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnArmMove(InputAction.CallbackContext context);
        void OnJoin(InputAction.CallbackContext context);
        void OnSwitchArmsDivan(InputAction.CallbackContext context);
        void OnResetDivan(InputAction.CallbackContext context);
    }
}
